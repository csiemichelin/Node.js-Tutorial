#!/usr/bin/env node

// 導入db函數 (mongoose)
const db = require('../db/db');
const fs = require('fs');

// 呼叫db函數
db(() => {  // 代表數據庫服務成功連接後，再去啟動http服務 (數據庫連接不上，後面的服務啟動都沒有意義)
  /**
   * Module dependencies.
   */

  var app = require('../app');
  var debug = require('debug')('michelinaccounts:server');
  var http = require('http');
  // 導入https
  const https = require('https');

  /**
   * Get port from environment and store in Express.
   */

  // var port = normalizePort(process.env.PORT || '3000');
  // port 80為瀏覽器預設，這樣就不用打port了
  var port = normalizePort(process.env.PORT || '80');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var serverHttps = https.createServer({
    key: fs.readFileSync('C:\\Users\\User\\OneDrive - ITRI\\Documents\\憑證\\server.pem'),
    cer: fs.readFileSync('C:\\Users\\User\\OneDrive - ITRI\\Documents\\憑證\\cert.pem'),
    ca: fs.readFileSync('C:\\Users\\User\\OneDrive - ITRI\\Documents\\憑證\\rootCA.pem')
  }, app);
  var serverHttp = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */
  serverHttps.listen(443);
  serverHttps.on('error', onError);
  serverHttps.on('listening', onListening);

  serverHttp.listen(port);
  serverHttp.on('error', onError);
  serverHttp.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = serverHttp.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})